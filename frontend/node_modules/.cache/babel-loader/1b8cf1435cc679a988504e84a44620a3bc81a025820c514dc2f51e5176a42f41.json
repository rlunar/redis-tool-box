{"ast":null,"code":"var _jsxFileName = \"/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js\",\n  _s = $RefreshSig$();\n// Monitor.js\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitor() {\n  _s();\n  const [commands, setCommands] = useState([]);\n  let socket = null;\n  useEffect(() => {\n    // Establishing WebSocket connection\n    socket = new WebSocket('ws://localhost:3001');\n    socket.onopen = () => {\n      console.log('WebSocket connection opened.');\n      socket.send('start'); // Start the monitoring\n    };\n\n    socket.onmessage = event => {\n      const newCommand = JSON.parse(event.data);\n      setCommands(prevCommands => [...prevCommands, newCommand]);\n    };\n    socket.onclose = event => {\n      console.log('Connection closed, code=' + event.code + ', reason=' + event.reason);\n    };\n    socket.onerror = event => {\n      console.error('WebSocket Error:', event);\n    };\n\n    // Clean-up WebSocket on component unmount\n    return () => {\n      socket.close();\n    };\n  }, []); // The empty array means this useEffect runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Redis Commands Monitored:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: commands.map((command, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: command.join(' ')\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(Monitor, \"mAOdeVGVeGwXqSSgsy7fYuKb8ig=\");\n_c = Monitor;\nexport default Monitor;\nvar _c;\n$RefreshReg$(_c, \"Monitor\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Monitor","_s","commands","setCommands","socket","WebSocket","onopen","console","log","send","onmessage","event","newCommand","JSON","parse","data","prevCommands","onclose","code","reason","onerror","error","close","children","fileName","_jsxFileName","lineNumber","columnNumber","map","command","index","join","_c","$RefreshReg$"],"sources":["/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js"],"sourcesContent":["// Monitor.js\nimport React, { useEffect, useState } from 'react';\n\nfunction Monitor() {\n    const [commands, setCommands] = useState([]);\n    let socket = null;\n\n    useEffect(() => {\n        // Establishing WebSocket connection\n        socket = new WebSocket('ws://localhost:3001');\n\n        socket.onopen = () => {\n            console.log('WebSocket connection opened.');\n            socket.send('start');  // Start the monitoring\n        };\n\n        socket.onmessage = (event) => {\n            const newCommand = JSON.parse(event.data);\n            setCommands(prevCommands => [...prevCommands, newCommand]);\n        };\n\n        socket.onclose = (event) => {\n            console.log('Connection closed, code=' + event.code + ', reason=' + event.reason);\n        };\n\n        socket.onerror = (event) => {\n            console.error('WebSocket Error:', event);\n        };\n\n        // Clean-up WebSocket on component unmount\n        return () => {\n            socket.close();\n        };\n    }, []);  // The empty array means this useEffect runs once when the component mounts\n\n    return (\n        <div>\n            <h2>Redis Commands Monitored:</h2>\n            <ul>\n                {commands.map((command, index) => (\n                    <li key={index}>{command.join(' ')}</li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default Monitor;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,IAAIO,MAAM,GAAG,IAAI;EAEjBR,SAAS,CAAC,MAAM;IACZ;IACAQ,MAAM,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAE7CD,MAAM,CAACE,MAAM,GAAG,MAAM;MAClBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CJ,MAAM,CAACK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAE;IAC3B,CAAC;;IAEDL,MAAM,CAACM,SAAS,GAAIC,KAAK,IAAK;MAC1B,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;MACzCZ,WAAW,CAACa,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEJ,UAAU,CAAC,CAAC;IAC9D,CAAC;IAEDR,MAAM,CAACa,OAAO,GAAIN,KAAK,IAAK;MACxBJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,GAAGG,KAAK,CAACO,IAAI,GAAG,WAAW,GAAGP,KAAK,CAACQ,MAAM,CAAC;IACrF,CAAC;IAEDf,MAAM,CAACgB,OAAO,GAAIT,KAAK,IAAK;MACxBJ,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAEV,KAAK,CAAC;IAC5C,CAAC;;IAED;IACA,OAAO,MAAM;MACTP,MAAM,CAACkB,KAAK,CAAC,CAAC;IAClB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,oBACIvB,OAAA;IAAAwB,QAAA,gBACIxB,OAAA;MAAAwB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClC5B,OAAA;MAAAwB,QAAA,EACKrB,QAAQ,CAAC0B,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACzB/B,OAAA;QAAAwB,QAAA,EAAiBM,OAAO,CAACE,IAAI,CAAC,GAAG;MAAC,GAAzBD,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyB,CAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAAC1B,EAAA,CA1CQD,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AA4ChB,eAAeA,OAAO;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}