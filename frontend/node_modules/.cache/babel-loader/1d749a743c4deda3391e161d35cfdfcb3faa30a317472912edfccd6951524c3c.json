{"ast":null,"code":"var _jsxFileName = \"/home/y4n/React_Apps/tool-box/frontend/src/components/ApiCaching.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ApiCaching() {\n  _s();\n  var _weather$main;\n  const [weather, setWeather] = useState({});\n  const [city, setCity] = useState(\"Paris\"); // default to the capital of Russia\n  const [responseTime, setResponseTime] = useState(null);\n  const cities = [\"Paris\",\n  // France\n  \"Ottawa\",\n  // Canada\n  \"Beijing\",\n  // China\n  \"New Delhi\",\n  // India\n  \"Canberra\",\n  // Australia\n  \"Brasília\",\n  // Brazil\n  \"Astana\",\n  // Kazakhstan\n  \"Buenos Aires\",\n  // Argentina\n  \"Algiers\",\n  // Algeria\n  \"Riyadh\" // Saudi Arabia\n  ];\n\n  function kelvinToCelsius(kelvin) {\n    return kelvin - 273.15;\n  }\n\n  // New state for showing or hiding the code\n  const [showCode, setShowCode] = useState(false);\n\n  // Function to toggle the visibility of the code block\n  const toggleCode = () => {\n    setShowCode(prevState => !prevState);\n  };\n  const fetchWeather = async (fromSource = false) => {\n    const startTime = new Date().getTime();\n    try {\n      const response = await axios.get(`http://localhost:3001/weather?city=${city}${fromSource ? '&source=true' : ''}`);\n      const endTime = new Date().getTime();\n      setResponseTime(endTime - startTime);\n      setWeather(response.data);\n    } catch (error) {\n      console.error('Failed to fetch weather:', error);\n    }\n  };\n  const clearCityCache = async () => {\n    try {\n      await axios.delete(`http://localhost:3001/cache?city=${city}`);\n      console.log(`Cache for ${city} cleared`);\n    } catch (error) {\n      console.error('Failed to clear cache:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Weather for \", weather.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Temperature: \", kelvinToCelsius((_weather$main = weather.main) === null || _weather$main === void 0 ? void 0 : _weather$main.temp).toFixed(2), \" \\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Description: \", weather.weather && weather.weather[0] && weather.weather[0].description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Response Time: \", responseTime, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: city,\n        onChange: e => setCity(e.target.value),\n        children: cities.map(cityName => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cityName,\n          children: cityName\n        }, cityName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchWeather(false),\n        children: \"Get Data from Cache\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchWeather(true),\n        children: \"Get Data from Source API\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCityCache,\n        children: \"Clear City Cache\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"code-button\",\n        onClick: toggleCode,\n        style: {\n          flex: 1\n        },\n        children: showCode ? \"Hide the Code\" : \"Show the Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), showCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-container\",\n      style: {\n        marginTop: '10px',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          style: {\n            marginTop: '10px',\n            width: 'auto',\n            whiteSpace: 'pre-wrap',\n            overflowWrap: 'anywhere'\n          },\n          children: `\napp.get('/weather', async (req, res) => {\n    console.log(\"Received request for weather data.\");\n    const city = req.query.city || 'Seattle';\n\n    if (req.query.source === 'true') {\n        // Fetch directly from OpenWeather API without checking cache\n        try {\n            console.log(\"Fetching data directly from OpenWeather API...\");\n            let weatherResponse = await axios.get(https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY});\n            res.json(weatherResponse.data);\n            return;\n        } catch (error) {\n            console.error(\"Failed to fetch from OpenWeather API:\", error.message);\n            res.status(500).json({ error: \"Failed to fetch weather data\" });\n            return;\n        }\n    }\n\n    // Check cache first\n    redisClient.get(city, async (err, data) => {\n        if (err) throw err;\n\n        if (data !== null) {\n            console.log(\"Serving data from cache.\");\n            res.json(JSON.parse(data));\n        } else {\n            try {\n                console.log(\"Fetching data from OpenWeather API...\");\n                let weatherResponse = await axios.get(https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY});\n                redisClient.setex(city, 300, JSON.stringify(weatherResponse.data));\n                res.json(weatherResponse.data);\n            } catch (error) {\n                console.error(\"Failed to fetch from OpenWeather API:\", error.message);\n                res.status(500).json({ error: \"Failed to fetch weather data\" });\n            }\n        }\n    });\n});\n\napp.delete('/cache', (req, res) => {\n    const city = req.query.city;\n\n    redisClient.del(city, (err, reply) => {\n        if (err) {\n            console.error(\"Error clearing cache:\", err);\n            res.status(500).json({ error: \"Failed to clear cache\" });\n            return;\n        }\n        \n        if (reply === 1) {\n            console.log(Cache for {city} cleared);\n            res.json({ message: Cache for {city} cleared });\n        } else {\n            console.log(No cache found for {city});\n            res.status(404).json({ message: No cache found for {city} });\n        }\n    });\n});\n\n                            `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(ApiCaching, \"3pGyRuA6YbTrjM6go/FIs246qmg=\");\n_c = ApiCaching;\nexport default ApiCaching;\nvar _c;\n$RefreshReg$(_c, \"ApiCaching\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ApiCaching","_s","_weather$main","weather","setWeather","city","setCity","responseTime","setResponseTime","cities","kelvinToCelsius","kelvin","showCode","setShowCode","toggleCode","prevState","fetchWeather","fromSource","startTime","Date","getTime","response","get","endTime","data","error","console","clearCityCache","delete","log","children","name","fileName","_jsxFileName","lineNumber","columnNumber","main","temp","toFixed","description","value","onChange","e","target","map","cityName","onClick","style","width","display","justifyContent","marginTop","className","flex","whiteSpace","overflowWrap","_c","$RefreshReg$"],"sources":["/home/y4n/React_Apps/tool-box/frontend/src/components/ApiCaching.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\n\nfunction ApiCaching() {\n    const [weather, setWeather] = useState({});\n    const [city, setCity] = useState(\"Paris\"); // default to the capital of Russia\n    const [responseTime, setResponseTime] = useState(null);\n\n    const cities = [\n        \"Paris\",        // France\n        \"Ottawa\",       // Canada\n        \"Beijing\",      // China\n        \"New Delhi\",    // India\n        \"Canberra\",     // Australia\n        \"Brasília\",     // Brazil\n        \"Astana\",       // Kazakhstan\n        \"Buenos Aires\", // Argentina\n        \"Algiers\",      // Algeria\n        \"Riyadh\"        // Saudi Arabia\n    ];\n\n    function kelvinToCelsius(kelvin) {\n        return kelvin - 273.15;\n    }\n\n// New state for showing or hiding the code\nconst [showCode, setShowCode] = useState(false);\n\n// Function to toggle the visibility of the code block\nconst toggleCode = () => {\n    setShowCode(prevState => !prevState);\n}\n\n    const fetchWeather = async (fromSource = false) => {\n        const startTime = new Date().getTime();\n\n        try {\n            const response = await axios.get(`http://localhost:3001/weather?city=${city}${fromSource ? '&source=true' : ''}`);\n            \n            const endTime = new Date().getTime();\n            setResponseTime(endTime - startTime);\n\n            setWeather(response.data);\n        } catch (error) {\n            console.error('Failed to fetch weather:', error);\n        }\n    };\n\n    const clearCityCache = async () => {\n        try {\n            await axios.delete(`http://localhost:3001/cache?city=${city}`);\n            console.log(`Cache for ${city} cleared`);\n        } catch (error) {\n            console.error('Failed to clear cache:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Weather for {weather.name}</h2>\n            <div>Temperature: {kelvinToCelsius(weather.main?.temp).toFixed(2)} °C</div>\n            <div>Description: {weather.weather && weather.weather[0] && weather.weather[0].description}</div>\n            <div>Response Time: {responseTime} ms</div>\n            <div>\n                <select value={city} onChange={e => setCity(e.target.value)}>\n                    {cities.map(cityName => (\n                        <option key={cityName} value={cityName}>\n                            {cityName}\n                        </option>\n                    ))}\n                </select>\n                <button onClick={() => fetchWeather(false)}>Get Data from Cache</button>\n                <button onClick={() => fetchWeather(true)}>Get Data from Source API</button>\n                <button onClick={clearCityCache}>Clear City Cache</button>\n\n            </div>\n            {/* Show/Hide Code button */}\n      <div style={{ width: '100%', display: 'flex', justifyContent: 'flex-start', marginTop: '10px' }}>\n        <button className=\"code-button\" onClick={toggleCode} style={{ flex: 1 }}>\n          {showCode ? \"Hide the Code\" : \"Show the Code\"}\n        </button>\n      </div>\n  \n      {showCode && (\n        <div className=\"code-container\" style={{ marginTop: '10px',width: '100%' }}>\n        <pre>\n            <code style={{ marginTop: '10px',width: 'auto', whiteSpace: 'pre-wrap', overflowWrap: 'anywhere'  }}>\n                            {`\napp.get('/weather', async (req, res) => {\n    console.log(\"Received request for weather data.\");\n    const city = req.query.city || 'Seattle';\n\n    if (req.query.source === 'true') {\n        // Fetch directly from OpenWeather API without checking cache\n        try {\n            console.log(\"Fetching data directly from OpenWeather API...\");\n            let weatherResponse = await axios.get(https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY});\n            res.json(weatherResponse.data);\n            return;\n        } catch (error) {\n            console.error(\"Failed to fetch from OpenWeather API:\", error.message);\n            res.status(500).json({ error: \"Failed to fetch weather data\" });\n            return;\n        }\n    }\n\n    // Check cache first\n    redisClient.get(city, async (err, data) => {\n        if (err) throw err;\n\n        if (data !== null) {\n            console.log(\"Serving data from cache.\");\n            res.json(JSON.parse(data));\n        } else {\n            try {\n                console.log(\"Fetching data from OpenWeather API...\");\n                let weatherResponse = await axios.get(https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY});\n                redisClient.setex(city, 300, JSON.stringify(weatherResponse.data));\n                res.json(weatherResponse.data);\n            } catch (error) {\n                console.error(\"Failed to fetch from OpenWeather API:\", error.message);\n                res.status(500).json({ error: \"Failed to fetch weather data\" });\n            }\n        }\n    });\n});\n\napp.delete('/cache', (req, res) => {\n    const city = req.query.city;\n\n    redisClient.del(city, (err, reply) => {\n        if (err) {\n            console.error(\"Error clearing cache:\", err);\n            res.status(500).json({ error: \"Failed to clear cache\" });\n            return;\n        }\n        \n        if (reply === 1) {\n            console.log(Cache for {city} cleared);\n            res.json({ message: Cache for {city} cleared });\n        } else {\n            console.log(No cache found for {city});\n            res.status(404).json({ message: No cache found for {city} });\n        }\n    });\n});\n\n                            `}\n                        </code>\n                    </pre>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ApiCaching;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}