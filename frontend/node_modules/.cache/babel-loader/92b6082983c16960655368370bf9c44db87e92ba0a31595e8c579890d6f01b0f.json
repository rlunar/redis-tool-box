{"ast":null,"code":"var _jsxFileName = \"/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitor() {\n  _s();\n  const [commands, setCommands] = useState([]);\n  const wsRef = useRef();\n\n  // New state for showing or hiding the code\n  const [showCode, setShowCode] = useState(false);\n\n  // Function to toggle the visibility of the code block\n  const toggleCode = () => {\n    setShowCode(prevState => !prevState);\n  };\n  useEffect(() => {\n    setTimeout(() => {\n      wsRef.current = new WebSocket('ws://localhost:3002');\n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected.');\n      };\n      wsRef.current.onmessage = message => {\n        const command = JSON.parse(message.data);\n        console.log(`Received command from server: ${command}`);\n        setCommands(prevCommands => {\n          const newCommands = [...prevCommands, command.join(' ')];\n          return newCommands.slice(-9); // keep only the last 10 commands\n        });\n      };\n\n      wsRef.current.onerror = error => {\n        console.error(`WebSocket Error: ${error}`);\n      };\n      wsRef.current.onclose = () => {\n        console.log('WebSocket closed.');\n      };\n      return () => {\n        if (wsRef.current) {\n          wsRef.current.close();\n        }\n      };\n    }, 1000); // waits 1 second before attempting to connect\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"terminal\",\n    style: {\n      width: '60%'\n    },\n    children: commands.map((command, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"command\",\n      children: command\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '60%',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"code-button\",\n        onClick: toggleCode,\n        style: {\n          flex: 1\n        },\n        children: showCode ? \"Hide the Code\" : \"Show the Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 1\n    }, this), showCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-container\",\n      style: {\n        marginTop: '10px',\n        width: '60%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: `\n///Add Element to the Sorted Set\napp.post('/addElement', (req, res) => {\n    const { element, score } = req.body;\n    client.zadd('sortedSet', score, element, (err, reply) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        res.status(200).send({ added: true });\n    });\n});\n\n///Get All Elements from the Sorted Set\napp.get('/getAllElements', (req, res) => {\n    client.zrange('sortedSet', 0, -1, 'WITHSCORES', (err, elements) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        let result = [];\n        for (let i = 0; i < elements.length; i += 2) {\n            result.push({ element: elements[i], score: elements[i + 1] });\n        }\n        res.status(200).send(result);\n    });\n});\n\n///Update Score of an Element\napp.put('/updateScore', (req, res) => {\n    const { element, newScore } = req.body;\n    client.zadd('sortedSet', newScore, element, (err, reply) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        res.status(200).send({ updated: true });\n    });\n});\n\n///Fetch Ranked Elements\napp.get('/getRankedElements', (req, res) => {\n    client.zrevrange('sortedSet', 0, -1, 'WITHSCORES', (err, elements) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        let result = [];\n        for (let i = 0; i < elements.length; i += 2) {\n            result.push({ element: elements[i], score: elements[i + 1] });\n        }\n        res.status(200).send(result);\n    });\n});\n\n///Delete an Element\napp.delete('/deleteElement', (req, res) => {\n    const { element } = req.body;\n\n    client.zrem('sortedSet', element, (err, response) => {\n        if (err) {\n            return res.status(500).json({ message: \"Error deleting element\", error: err.message });\n        }\n        res.json({ message: \"Element deleted successfully\" });\n    });\n});\n\n///Fetch Ranked Elements for the Table\napp.get('/getRanking', async (req, res) => {\n    try {\n        const ranking = await getRankingFromRedis();\n        res.status(200).json(ranking);\n    } catch (error) {\n        console.error(\"Error:\", error);  // This will print the error details in the backend console\n        res.status(500).json({ message: \"Error fetching ranking\", error: error.message });\n    }\n    \n});\n\nconst getRankingFromRedis = async () => {\n    return new Promise((resolve, reject) => {\n        client.zrevrange('sortedSet', 0, -1, 'WITHSCORES', (err, result) => {\n            if (err) return reject(err);\n\n            let ranking = [];\n            for (let i = 0; i < result.length; i += 2) {\n                ranking.push({\n                    element: result[i],\n                    score: result[i + 1]\n                });\n            }\n            resolve(ranking);\n        });\n    });\n};\n\n                            `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(Monitor, \"yvXJFIIzHF5YStMsR7VHGyitPK8=\");\n_c = Monitor;\nexport default Monitor;\nvar _c;\n$RefreshReg$(_c, \"Monitor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Monitor","_s","commands","setCommands","wsRef","showCode","setShowCode","toggleCode","prevState","setTimeout","current","WebSocket","onopen","console","log","onmessage","message","command","JSON","parse","data","prevCommands","newCommands","join","slice","onerror","error","onclose","close","className","style","width","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","marginTop","onClick","flex","_c","$RefreshReg$"],"sources":["/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction Monitor() {\n    const [commands, setCommands] = useState([]);\n    const wsRef = useRef();\n\n// New state for showing or hiding the code\nconst [showCode, setShowCode] = useState(false);\n\n// Function to toggle the visibility of the code block\nconst toggleCode = () => {\n    setShowCode(prevState => !prevState);\n}\n\n\n    useEffect(() => {\n        setTimeout(() => {\n        wsRef.current = new WebSocket('ws://localhost:3002');\n\n        wsRef.current.onopen = () => {\n            console.log('WebSocket connected.');\n        };\n\n        wsRef.current.onmessage = (message) => {\n            const command = JSON.parse(message.data);\n            console.log(`Received command from server: ${command}`);\n            setCommands(prevCommands => {\n                const newCommands = [...prevCommands, command.join(' ')];\n                return newCommands.slice(-9);  // keep only the last 10 commands\n            });\n        };        \n\n        wsRef.current.onerror = (error) => {\n            console.error(`WebSocket Error: ${error}`);\n        };\n\n        wsRef.current.onclose = () => {\n            console.log('WebSocket closed.');\n        };\n\n        return () => {\n            if (wsRef.current) {\n                wsRef.current.close();\n            }\n        }}, 1000); // waits 1 second before attempting to connect\n    }, []);\n\n    return (\n        <div className=\"terminal\" style={{ width: '60%'}}>\n            {commands.map((command, index) => (\n                <div className=\"command\" key={index}>{command}</div>\n            ))}\n\n    \n        </div>\n    );\n    return (\n        <div>\n{/* Show/Hide Code button */}\n<div style={{ width: '60%', display: 'flex', justifyContent: 'flex-start', marginTop: '10px' }}>\n        <button className=\"code-button\" onClick={toggleCode} style={{ flex: 1 }}>\n          {showCode ? \"Hide the Code\" : \"Show the Code\"}\n        </button>\n      </div>\n  \n      {showCode && (\n        <div className=\"code-container\" style={{ marginTop: '10px',width: '60%' }}>\n          <pre>\n            <code>\n                            {`\n///Add Element to the Sorted Set\napp.post('/addElement', (req, res) => {\n    const { element, score } = req.body;\n    client.zadd('sortedSet', score, element, (err, reply) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        res.status(200).send({ added: true });\n    });\n});\n\n///Get All Elements from the Sorted Set\napp.get('/getAllElements', (req, res) => {\n    client.zrange('sortedSet', 0, -1, 'WITHSCORES', (err, elements) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        let result = [];\n        for (let i = 0; i < elements.length; i += 2) {\n            result.push({ element: elements[i], score: elements[i + 1] });\n        }\n        res.status(200).send(result);\n    });\n});\n\n///Update Score of an Element\napp.put('/updateScore', (req, res) => {\n    const { element, newScore } = req.body;\n    client.zadd('sortedSet', newScore, element, (err, reply) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        res.status(200).send({ updated: true });\n    });\n});\n\n///Fetch Ranked Elements\napp.get('/getRankedElements', (req, res) => {\n    client.zrevrange('sortedSet', 0, -1, 'WITHSCORES', (err, elements) => {\n        if (err) {\n            res.status(500).send({ error: err.message });\n            return;\n        }\n        let result = [];\n        for (let i = 0; i < elements.length; i += 2) {\n            result.push({ element: elements[i], score: elements[i + 1] });\n        }\n        res.status(200).send(result);\n    });\n});\n\n///Delete an Element\napp.delete('/deleteElement', (req, res) => {\n    const { element } = req.body;\n\n    client.zrem('sortedSet', element, (err, response) => {\n        if (err) {\n            return res.status(500).json({ message: \"Error deleting element\", error: err.message });\n        }\n        res.json({ message: \"Element deleted successfully\" });\n    });\n});\n\n///Fetch Ranked Elements for the Table\napp.get('/getRanking', async (req, res) => {\n    try {\n        const ranking = await getRankingFromRedis();\n        res.status(200).json(ranking);\n    } catch (error) {\n        console.error(\"Error:\", error);  // This will print the error details in the backend console\n        res.status(500).json({ message: \"Error fetching ranking\", error: error.message });\n    }\n    \n});\n\nconst getRankingFromRedis = async () => {\n    return new Promise((resolve, reject) => {\n        client.zrevrange('sortedSet', 0, -1, 'WITHSCORES', (err, result) => {\n            if (err) return reject(err);\n\n            let ranking = [];\n            for (let i = 0; i < result.length; i += 2) {\n                ranking.push({\n                    element: result[i],\n                    score: result[i + 1]\n                });\n            }\n            resolve(ranking);\n        });\n    });\n};\n\n                            `}\n                        </code>\n                    </pre>\n                </div>\n            )}\n        </div>\n    );\n    \n}\n\nexport default Monitor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}