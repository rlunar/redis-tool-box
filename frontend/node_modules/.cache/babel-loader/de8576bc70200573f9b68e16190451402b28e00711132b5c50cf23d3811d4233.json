{"ast":null,"code":"var _jsxFileName = \"/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Monitor() {\n  _s();\n  const [output, setOutput] = useState([]);\n  useEffect(() => {\n    const ws = new WebSocket('ws://localhost:3001/monitor');\n    ws.onmessage = event => {\n      setOutput(JSON.parse(event.data));\n    };\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  // New state for showing or hiding the code\n  const [showCode, setShowCode] = useState(false);\n\n  // Function to toggle the visibility of the code block\n  const toggleCode = () => {\n    setShowCode(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'flex-start'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '60%',\n        display: 'flex',\n        justifyContent: 'flex-start',\n        marginTop: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"code-button\",\n        onClick: toggleCode,\n        style: {\n          flex: 1\n        },\n        children: showCode ? \"Hide the Code\" : \"Show the Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 1\n    }, this), showCode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-container\",\n      style: {\n        marginTop: '10px',\n        width: '60%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: `\n // Run Monitor from Redis\n expressWs(app);\n app.ws('/monitor', (ws, req) => {\n     let output = [];\n \n     // Create a new Redis client for monitoring\n     const monitorClient = redis.createClient({\n         host: '127.0.0.1',\n         port: 6379\n     });\n \n     monitorClient.monitor((err, res) => {\n         if (err) throw err;\n \n         monitorClient.on('monitor', (time, args) => {\n             output.push(args.join(' '));\n \n             if (output.length > 15) {\n                 output.shift();\n             }\n \n             ws.send(JSON.stringify(output));\n         });\n     });\n \n     ws.on('close', () => {\n         monitorClient.quit();\n     });\n });\n    \n                                `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(Monitor, \"MxpHlAfSjfulosNwPthYdJ6R7i0=\");\n_c = Monitor;\nexport default Monitor;\nvar _c;\n$RefreshReg$(_c, \"Monitor\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Monitor","_s","output","setOutput","ws","WebSocket","onmessage","event","JSON","parse","data","close","showCode","setShowCode","toggleCode","prevState","style","display","flexDirection","alignItems","children","width","justifyContent","marginTop","className","onClick","flex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Monitor() {\n    const [output, setOutput] = useState([]);\n\n    useEffect(() => {\n        const ws = new WebSocket('ws://localhost:3001/monitor');\n\n        ws.onmessage = (event) => {\n            setOutput(JSON.parse(event.data));\n        };\n\n        return () => {\n            ws.close();\n        };\n    }, []);\n\n// New state for showing or hiding the code\nconst [showCode, setShowCode] = useState(false);\n\n// Function to toggle the visibility of the code block\nconst toggleCode = () => {\n    setShowCode(prevState => !prevState);\n}\n\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n   {/* Show/Hide Code button */}\n<div style={{ width: '60%', display: 'flex', justifyContent: 'flex-start', marginTop: '10px' }}>\n        <button className=\"code-button\" onClick={toggleCode} style={{ flex: 1 }}>\n          {showCode ? \"Hide the Code\" : \"Show the Code\"}\n        </button>\n      </div>\n          {showCode && (\n            <div className=\"code-container\" style={{ marginTop: '10px',width: '60%' }}>\n            <pre>\n                <code>\n                                {`\n // Run Monitor from Redis\n expressWs(app);\n app.ws('/monitor', (ws, req) => {\n     let output = [];\n \n     // Create a new Redis client for monitoring\n     const monitorClient = redis.createClient({\n         host: '127.0.0.1',\n         port: 6379\n     });\n \n     monitorClient.monitor((err, res) => {\n         if (err) throw err;\n \n         monitorClient.on('monitor', (time, args) => {\n             output.push(args.join(' '));\n \n             if (output.length > 15) {\n                 output.shift();\n             }\n \n             ws.send(JSON.stringify(output));\n         });\n     });\n \n     ws.on('close', () => {\n         monitorClient.quit();\n     });\n });\n    \n                                `}\n                            </code>\n                        </pre>\n                    </div>\n                )}\n                </div>\n    );\n}\n\nexport default Monitor;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAMO,EAAE,GAAG,IAAIC,SAAS,CAAC,6BAA6B,CAAC;IAEvDD,EAAE,CAACE,SAAS,GAAIC,KAAK,IAAK;MACtBJ,SAAS,CAACK,IAAI,CAACC,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,OAAO,MAAM;MACTN,EAAE,CAACO,KAAK,CAAC,CAAC;IACd,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEV;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMkB,UAAU,GAAGA,CAAA,KAAM;IACrBD,WAAW,CAACE,SAAS,IAAI,CAACA,SAAS,CAAC;EACxC,CAAC;EAEG,oBACIhB,OAAA;IAAKiB,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAa,CAAE;IAAAC,QAAA,gBAE3FrB,OAAA;MAAKiB,KAAK,EAAE;QAAEK,KAAK,EAAE,KAAK;QAAEJ,OAAO,EAAE,MAAM;QAAEK,cAAc,EAAE,YAAY;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAH,QAAA,eACvFrB,OAAA;QAAQyB,SAAS,EAAC,aAAa;QAACC,OAAO,EAAEX,UAAW;QAACE,KAAK,EAAE;UAAEU,IAAI,EAAE;QAAE,CAAE;QAAAN,QAAA,EACrER,QAAQ,GAAG,eAAe,GAAG;MAAe;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACDlB,QAAQ,iBACPb,OAAA;MAAKyB,SAAS,EAAC,gBAAgB;MAACR,KAAK,EAAE;QAAEO,SAAS,EAAE,MAAM;QAACF,KAAK,EAAE;MAAM,CAAE;MAAAD,QAAA,eAC1ErB,OAAA;QAAAqB,QAAA,eACIrB,OAAA;UAAAqB,QAAA,EACkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QAAiC;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEtB;AAAC7B,EAAA,CAzEQD,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AA2EhB,eAAeA,OAAO;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}