{"ast":null,"code":"var _jsxFileName = \"/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Monitor = () => {\n  _s();\n  const [commands, setCommands] = useState([]);\n  const socketRef = useRef(null);\n  useEffect(() => {\n    socketRef.current = new WebSocket('ws://localhost:3001');\n    socketRef.current.onopen = () => {\n      console.log('WebSocket connection opened.');\n      socketRef.current.send('start');\n    };\n    socketRef.current.onmessage = event => {\n      setCommands(prevCommands => [...prevCommands, event.data]);\n    };\n    socketRef.current.onclose = event => {\n      if (event.wasClean) {\n        console.log(`Closed cleanly, code=${event.code}, reason=${event.reason}`);\n      } else {\n        console.error('Connection died.');\n      }\n    };\n    socketRef.current.onerror = error => {\n      console.error(`[error] ${error.message}`);\n    };\n    return () => {\n      socketRef.current.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Redis Commands Monitored:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: commands.map((command, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: command\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(Monitor, \"bke18Ssfq76xJ/w5gZO43jT01R8=\");\n_c = Monitor;\nexport default Monitor;\nvar _c;\n$RefreshReg$(_c, \"Monitor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Monitor","_s","commands","setCommands","socketRef","current","WebSocket","onopen","console","log","send","onmessage","event","prevCommands","data","onclose","wasClean","code","reason","error","onerror","message","close","children","fileName","_jsxFileName","lineNumber","columnNumber","map","command","idx","_c","$RefreshReg$"],"sources":["/home/y4n/React_Apps/tool-box/frontend/src/components/Monitor.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst Monitor = () => {\n    const [commands, setCommands] = useState([]);\n    const socketRef = useRef(null);\n\n    useEffect(() => {\n        socketRef.current = new WebSocket('ws://localhost:3001');\n        \n        socketRef.current.onopen = () => {\n            console.log('WebSocket connection opened.');\n            socketRef.current.send('start');\n        };\n\n        socketRef.current.onmessage = (event) => {\n            setCommands((prevCommands) => [...prevCommands, event.data]);\n        };\n\n        socketRef.current.onclose = (event) => {\n            if (event.wasClean) {\n                console.log(`Closed cleanly, code=${event.code}, reason=${event.reason}`);\n            } else {\n                console.error('Connection died.');\n            }\n        };\n\n        socketRef.current.onerror = (error) => {\n            console.error(`[error] ${error.message}`);\n        };\n\n        return () => {\n            socketRef.current.close();\n        };\n    }, []);\n\n    return (\n        <div>\n            <h2>Monitor</h2>\n            <h4>Redis Commands Monitored:</h4>\n            <ul>\n                {commands.map((command, idx) => (\n                    <li key={idx}>{command}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Monitor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMS,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZQ,SAAS,CAACC,OAAO,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAExDF,SAAS,CAACC,OAAO,CAACE,MAAM,GAAG,MAAM;MAC7BC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CL,SAAS,CAACC,OAAO,CAACK,IAAI,CAAC,OAAO,CAAC;IACnC,CAAC;IAEDN,SAAS,CAACC,OAAO,CAACM,SAAS,GAAIC,KAAK,IAAK;MACrCT,WAAW,CAAEU,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,KAAK,CAACE,IAAI,CAAC,CAAC;IAChE,CAAC;IAEDV,SAAS,CAACC,OAAO,CAACU,OAAO,GAAIH,KAAK,IAAK;MACnC,IAAIA,KAAK,CAACI,QAAQ,EAAE;QAChBR,OAAO,CAACC,GAAG,CAAE,wBAAuBG,KAAK,CAACK,IAAK,YAAWL,KAAK,CAACM,MAAO,EAAC,CAAC;MAC7E,CAAC,MAAM;QACHV,OAAO,CAACW,KAAK,CAAC,kBAAkB,CAAC;MACrC;IACJ,CAAC;IAEDf,SAAS,CAACC,OAAO,CAACe,OAAO,GAAID,KAAK,IAAK;MACnCX,OAAO,CAACW,KAAK,CAAE,WAAUA,KAAK,CAACE,OAAQ,EAAC,CAAC;IAC7C,CAAC;IAED,OAAO,MAAM;MACTjB,SAAS,CAACC,OAAO,CAACiB,KAAK,CAAC,CAAC;IAC7B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIvB,OAAA;IAAAwB,QAAA,gBACIxB,OAAA;MAAAwB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB5B,OAAA;MAAAwB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClC5B,OAAA;MAAAwB,QAAA,EACKrB,QAAQ,CAAC0B,GAAG,CAAC,CAACC,OAAO,EAAEC,GAAG,kBACvB/B,OAAA;QAAAwB,QAAA,EAAeM;MAAO,GAAbC,GAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAC1B,EAAA,CA5CID,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AA8Cb,eAAeA,OAAO;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}